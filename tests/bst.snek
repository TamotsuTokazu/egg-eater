(fun (insert root value)
    (if (= root (tuple))
        (tuple value (tuple) (tuple))
        (let ((x (index root 0)) (left (index root 1)) (right (index root 2)))
            (if (< value x)
                (tuple x (insert left value) right)
                (if (> value x)
                    (tuple x left (insert right value))
                    root
                )
            )
        )
    )
)

(fun (tr root) (block
    (if (= root (tuple))
        0
        (block
            (tr (index root 1))
            (print (index root 0))
            (tr (index root 2))
        )
    )
))

(fun (contains root value)
    (if (= root (tuple))
        false
        (let ((x (index root 0)) (left (index root 1)) (right (index root 2)))
            (if (< value x)
                (contains left value)
                (if (> value x)
                    (contains right value)
                    true
                )
            )
        )
    )
)

(let ((t1 (tuple)) (t2 (tuple))) (block
    (set! t1 (insert t1 3))
    (set! t1 (insert t1 1))
    (set! t1 (insert t1 4))
    (print t1)
    (set! t1 (insert t1 1))
    (set! t1 (insert t1 5))
    (set! t1 (insert t1 9))
    (print t1)
    (tr t1)
    (print (contains t1 3))
    (print (contains t1 1))
    (print (contains t1 7))
    (print (contains t1 2))
    (set! t2 (insert t2 4))
    (set! t2 (insert t2 2))
    (set! t2 (insert t2 3))
    (set! t2 (insert t2 1))
    (set! t2 (insert t2 6))
    (set! t2 (insert t2 5))
    (set! t2 (insert t2 7))
    (print t2)
    (tr t2)
    (print (contains t2 1))
    (print (contains t2 9))
    0
))